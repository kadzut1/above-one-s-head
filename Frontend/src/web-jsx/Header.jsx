import React, { useState } from 'react';
import "../web-scss/Header.scss"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º SCSS
import axios from 'axios';

const Header = () => {
  const [isCityDropdownOpen, setIsCityDropdownOpen] = useState(false);
  const [isLoginFormOpen, setIsLoginFormOpen] = useState(false);
  const [isRegisterFormOpen, setIsRegisterFormOpen] = useState(false); // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userNameDisplay, setUserNameDisplay] = useState('–í–æ–π—Ç–∏');
  const [accessToken, setAccessToken] = useState('');

  const handleSearch = (event) => {
    event.preventDefault();
    const query = event.target.elements.search.value;
    console.log(`–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${query}`);
  };

  const openNewTab = (url) => {
    window.open(url, '_blank');
  };

  const handleLogin = async (event) => {
    event.preventDefault();
    const loginData = {
      email,
      password,
    };

    try {
      const response = await axios.post('http://127.0.0.1:8000/api/login/', loginData);
      if (response.data.access) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setIsAuthenticated(true);
        setUserNameDisplay(response.data.user.username); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setAccessToken(response.data.access); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        setIsLoginFormOpen(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    }
  };

  const handleRegister = async (event) => {
    event.preventDefault();
    const registrationData = {
      username,
      email,
      password,
    };

    try {
      const response = await axios.post('http://127.0.0.1:8000/api/register/', registrationData);
      if (response.data.message) {
        setIsAuthenticated(true);
        setUserNameDisplay(username); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setIsRegisterFormOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    }
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setUserNameDisplay('–í–æ–π—Ç–∏');
    setAccessToken(''); // –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω
  };

  return (
    <header className="header">
      {/* –õ–æ–≥–æ—Ç–∏–ø */}
      
      {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–∞ */}
      <div className="city-selector">
        <span
          className="logo-location"
          onClick={() => setIsCityDropdownOpen(!isCityDropdownOpen)}
        >
          <a className="logo">DNS</a>
        </span>
        {isCityDropdownOpen &&
          <div className="city-dropdown">
            {/* –ü—Ä–∏–º–µ—Ä –≥–æ—Ä–æ–¥–æ–≤ */}
            {['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å'].map((city, index) => (
              <div
                key={index}
                className="city-item"
                onClick={() => {
                  console.log(`–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: ${city}`);
                  setIsCityDropdownOpen(false);
                }}
              >
                {city}
              </div>
            ))}
          </div>
        }
      </div>

      {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
      <form className="search-form" onSubmit={handleSearch}>
        <input
          type="text"
          name="search"
          placeholder="–ü–æ–∏—Å–∫"
          className="search-input"
        />
        <button type="submit" className="search-button">
          üîç
        </button>
      </form>

      <div className="header-buttons">
        {/* –ö–Ω–æ–ø–∫–∞ –í–æ–π—Ç–∏/–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <button
          className="login"
          onClick={() => isAuthenticated ? handleLogout() : setIsLoginFormOpen(!isLoginFormOpen)}
        >
          {isAuthenticated ? userNameDisplay : '–í–æ–π—Ç–∏'}
        </button>

        {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
        {isLoginFormOpen && !isRegisterFormOpen && (
          <div className="login-form">
            <form onSubmit={handleLogin}>
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
              <input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <button type="submit">–í–æ–π—Ç–∏</button>
              <button type="button" onClick={() => setIsLoginFormOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
              <button
                type="button"
                onClick={() => {
                  setIsLoginFormOpen(false);
                  setIsRegisterFormOpen(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                }}
              >
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </button>
            </form>
          </div>
        )}

        {/* –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        {isRegisterFormOpen && (
          <div className="register-form">
            <form onSubmit={handleRegister}>
              <input
                type="text"
                placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                required
              />
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
              <input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
              <button type="button" onClick={() => setIsRegisterFormOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
            </form>
          </div>
        )}

        
      </div>
    </header>
  );
};

export default Header;
